/*
  TOF10120 Distance Sensor Demonstration
  TOF10120-Demo.ino
  Demonstrates use of TOF10120 Distance Sensor
  Adapted from code from SurtrTech
  Displays results on Serial Monitor

  DroneBot Workshop 2019
  https://dronebotworkshop.com
*/

// BLUE TO A4
// GREEN TO A5

#include <Wire.h>

unsigned char ok_flag;
unsigned char fail_flag;

unsigned short lenth_val = 0;
unsigned char i2c_rx_buf[16];
unsigned char dirsend_flag = 0;

unsigned long lastRead = 0;
int lastReadDistance;

/**************************************************************************
 This is an example for our Monochrome OLEDs based on SSD1306 drivers

 Pick one up today in the adafruit shop!
 ------> http://www.adafruit.com/category/63_98

 This example is for a 128x64 pixel display using I2C to communicate
 3 pins are required to interface (two I2C and one reset).

 Adafruit invests time and resources providing this open
 source code, please support Adafruit and open-source
 hardware by purchasing products from Adafruit!

 Written by Limor Fried/Ladyada for Adafruit Industries,
 with contributions from the open source community.
 BSD license, check license.txt for more information
 All text above, and the splash screen below must be
 included in any redistribution.
 **************************************************************************/

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define LOGO_HEIGHT 64
#define LOGO_WIDTH 128
// 'tobylogo2', 128x64px
const unsigned char PROGMEM lena_bmp[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xe3, 0xb3, 0x33, 0x30, 0xf8, 0xf3, 0x07, 0xe3, 0x0d, 0x9b, 0x38, 0xd9, 0xb0, 0xff, 0xff, 0xff,
    0xc9, 0xb2, 0x32, 0x30, 0xf8, 0x73, 0x87, 0xc1, 0x65, 0x99, 0x30, 0x59, 0xb0, 0xff, 0xfc, 0x07,
    0xdf, 0xb2, 0x32, 0x30, 0xfb, 0x21, 0xcf, 0x9f, 0x65, 0x98, 0x27, 0xc1, 0xb0, 0xff, 0xf8, 0x03,
    0x99, 0xb0, 0x30, 0x30, 0xfb, 0x25, 0xcf, 0x9f, 0x0d, 0x98, 0x27, 0xc1, 0xb0, 0xff, 0xe0, 0x01,
    0xdd, 0xb4, 0xb4, 0xb7, 0xfb, 0x20, 0xcf, 0xd9, 0x6c, 0x9a, 0x36, 0x59, 0xb7, 0xff, 0xe1, 0xc1,
    0xc1, 0xb5, 0xb5, 0xb0, 0xf8, 0x4c, 0xcf, 0xc3, 0x64, 0x3b, 0x30, 0xd9, 0xb0, 0xff, 0xc1, 0xc1,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xc1,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xc1,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0x0f, 0xc1,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 0x0f, 0x81,
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x04, 0x7e, 0x0f, 0x81,
    0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x7e, 0x0f, 0x83,
    0xd6, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd0, 0x54, 0x1f, 0x81,
    0xee, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfc, 0x1e, 0x07,
    0x4e, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x41, 0x54, 0x1e, 0x05,
    0xee, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xfc, 0x1c, 0x0f,
    0x4e, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x54, 0x00, 0x15,
    0xee, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x8c, 0x00, 0x3f,
    0x4e, 0x05, 0x55, 0x55, 0x55, 0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x01, 0x05, 0x00, 0x55,
    0xee, 0x07, 0xff, 0xff, 0xff, 0xe6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0x1f, 0x01, 0xff,
    0xce, 0x01, 0x05, 0xd5, 0xd5, 0xc5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5,
    0xef, 0x00, 0x07, 0xff, 0xff, 0x8d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x4f, 0x80, 0x00, 0x10, 0x54, 0x11, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
    0xef, 0x87, 0x81, 0x00, 0x00, 0x3b, 0x80, 0x00, 0x3f, 0xe0, 0x3f, 0xf8, 0x01, 0xfe, 0x1f, 0xe0,
    0x56, 0x38, 0x05, 0x98, 0x00, 0x11, 0x00, 0x00, 0x15, 0x00, 0x05, 0x50, 0x00, 0x14, 0x05, 0x41,
    0xf4, 0x70, 0x85, 0x88, 0x00, 0x3b, 0x80, 0x00, 0x3e, 0x00, 0x03, 0xf8, 0x00, 0x3e, 0x0f, 0xc1,
    0x50, 0xe0, 0xc4, 0x9a, 0x00, 0x15, 0x54, 0x05, 0x54, 0x15, 0x01, 0x50, 0x54, 0x15, 0x05, 0x41,
    0xf1, 0xf0, 0xc4, 0xf6, 0x04, 0x37, 0xfe, 0x0f, 0xf8, 0x3f, 0xc1, 0xf8, 0x7e, 0x1f, 0x07, 0x83,
    0xd1, 0xaf, 0xce, 0xf6, 0x67, 0x05, 0xd4, 0x05, 0xd0, 0x55, 0xc0, 0xd0, 0x54, 0x15, 0x85, 0x85,
    0xf3, 0x80, 0xea, 0xf6, 0x63, 0x1f, 0xfe, 0x0f, 0xf0, 0x7f, 0xe0, 0xf8, 0x7e, 0x1f, 0x83, 0x07,
    0x44, 0x67, 0x39, 0xf6, 0x61, 0x95, 0x54, 0x05, 0x50, 0x55, 0x50, 0x50, 0x54, 0x15, 0x41, 0x05,
    0xcb, 0xce, 0x59, 0xf7, 0xf8, 0x1f, 0xfe, 0x0f, 0xf0, 0xff, 0xf0, 0xf8, 0x7c, 0x3f, 0xc1, 0x0f,
    0x3b, 0xce, 0x5d, 0x77, 0xc6, 0x15, 0x54, 0x05, 0x50, 0x55, 0x50, 0x50, 0x00, 0x55, 0x40, 0x15,
    0xb3, 0x26, 0xed, 0x76, 0xf3, 0x3f, 0xfe, 0x0f, 0xf0, 0xff, 0xf0, 0x78, 0x00, 0x3f, 0xe0, 0x1f,
    0x67, 0x82, 0xeb, 0xf5, 0x96, 0x15, 0x54, 0x05, 0x50, 0x55, 0x50, 0x50, 0x00, 0x15, 0x50, 0x15,
    0x4e, 0xf0, 0x02, 0xf1, 0x9f, 0x9f, 0xfe, 0x0f, 0xf0, 0xff, 0xf0, 0xf8, 0x7c, 0x0f, 0xf0, 0x3f,
    0x1e, 0x00, 0x02, 0xf1, 0x99, 0xc5, 0xd4, 0x05, 0xd0, 0xd5, 0xd0, 0xd0, 0x55, 0x05, 0xd0, 0x55,
    0x3f, 0xe8, 0x00, 0x10, 0x80, 0x0f, 0xfe, 0x0f, 0xf0, 0xff, 0xf0, 0xf8, 0x7f, 0x07, 0xf8, 0x7f,
    0x7f, 0xe6, 0x01, 0x00, 0x02, 0x05, 0x54, 0x05, 0x50, 0x55, 0x40, 0x50, 0x55, 0x05, 0x50, 0x55,
    0x7c, 0x0e, 0x80, 0xf0, 0x01, 0x87, 0xfe, 0x0f, 0xf0, 0x7f, 0xe1, 0xf8, 0x7f, 0x07, 0xf8, 0x7f,
    0x39, 0xdf, 0x4c, 0x43, 0xf4, 0x05, 0x54, 0x05, 0x50, 0x15, 0x41, 0x50, 0x55, 0x05, 0x50, 0x55,
    0x03, 0xdd, 0x7e, 0xcf, 0xfb, 0xc3, 0xfe, 0x0f, 0xf8, 0x1f, 0x83, 0xf8, 0x7e, 0x0f, 0xf8, 0x7f,
    0x4f, 0xdf, 0x5e, 0x5e, 0xf9, 0x41, 0x54, 0x05, 0x54, 0x00, 0x05, 0x50, 0x00, 0x15, 0x50, 0x55,
    0x6f, 0xcd, 0xff, 0x3f, 0x98, 0xfb, 0xfe, 0x0f, 0xff, 0x00, 0x0f, 0xf8, 0x00, 0x3f, 0xf8, 0x7f,
    0x27, 0xcf, 0x5f, 0x7d, 0x5a, 0x15, 0xd5, 0x05, 0xd5, 0xc0, 0x55, 0xd0, 0x00, 0xd5, 0xd0, 0x55,
    0x33, 0xa5, 0xff, 0x7b, 0x1b, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3,
    0x39, 0xb1, 0x5c, 0x3e, 0xf3, 0x85, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x11,
    0x9c, 0xb8, 0x40, 0x07, 0x63, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x2a, 0xab,
    0x0e, 0x5e, 0x0f, 0xc9, 0xe0, 0x65, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x44, 0x41,
    0x86, 0x6f, 0xff, 0xe6, 0xf9, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xaa, 0xaa, 0xab,
    0x47, 0x37, 0xff, 0xf1, 0xb3, 0x95, 0x55, 0x55, 0x55, 0x55, 0x54, 0x00, 0x01, 0x01, 0x01, 0x01,
    0xc3, 0x9d, 0xff, 0xfe, 0xe3, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xab,
    0xc1, 0xde, 0x7f, 0xff, 0x86, 0x15, 0xd5, 0xd5, 0xd5, 0xd5, 0x00, 0x44, 0x44, 0x44, 0x44, 0x41,
    0xe0, 0xef, 0x9f, 0xff, 0x4e, 0x7f, 0xff, 0xff, 0xff, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xab,
    0x50, 0x27, 0xe7, 0xf8, 0x80, 0x55, 0x55, 0x55, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    0xf8, 0x01, 0xf9, 0xff, 0x01, 0xff, 0xff, 0xfe, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xab,
    0x50, 0x00, 0x7f, 0xfc, 0x05, 0x55, 0x54, 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x41,
    0xfc, 0x00, 0x1f, 0xe0, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
    0x55, 0x00, 0x00, 0x00, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55};

void setup()
{
    Wire.begin();
    Serial.begin(9600, SERIAL_8N1);
    printf_begin();

    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
    { // Address 0x3D for 128x64
        Serial.println(F("SSD1306 allocation failed"));
        for (;;)
            ; // Don't proceed, loop forever
    }

    drawHeader();
}

void drawHeader(void)
{
    display.clearDisplay();

    // Toby face
    display.drawBitmap(
        (display.width() - LOGO_WIDTH) / 2,
        0,
        lena_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);

    display.display();
}

void loop()
{

    if (micros() - lastRead > 10000)
    {
        lastRead = micros();
        lastReadDistance = ReadDistance();

        showMeasurement();
    }
}

void showMeasurement()
{

    display.fillRect(76, 51, 51, 12, SSD1306_BLACK);
    display.setTextSize(1);              // Normal 1:1 pixel scale
    display.setTextColor(SSD1306_WHITE); // Draw white text
    display.setCursor(79, 54);
    display.print(lastReadDistance);
    display.setCursor(110, 54);
    display.print("mm");

    display.display();

    Serial.print(lastReadDistance);
    Serial.println(" mm");
}

int serial_putc(char c, struct __file *)
{
    Serial.write(c);
    return c;
}

void printf_begin(void)
{
    fdevopen(&serial_putc, 0);
}

void SensorRead(unsigned char addr, unsigned char *datbuf, unsigned char cnt)
{
    unsigned short result = 0;
    // step 1: instruct sensor to read echoes
    Wire.beginTransmission(82); // transmit to device #82 (0x52)
    // the address specified in the datasheet is 164 (0xa4)
    // but i2c adressing uses the high 7 bits so it's 82
    Wire.write(byte(addr)); // sets distance data address (addr)
    Wire.endTransmission(); // stop transmitting
    // step 2: wait for readings to happen
    delay(1); // datasheet suggests at least 30uS
    // step 3: request reading from sensor
    Wire.requestFrom(82, cnt); // request cnt bytes from slave device #82 (0x52)
    // step 5: receive reading from sensor
    if (cnt <= Wire.available())
    {                            // if two bytes were received
        *datbuf++ = Wire.read(); // receive high byte (overwrites previous reading)
        *datbuf++ = Wire.read(); // receive low byte as lower 8 bits
    }
}

int ReadDistance()
{
    SensorRead(0x00, i2c_rx_buf, 2);
    lenth_val = i2c_rx_buf[0];
    lenth_val = lenth_val << 8;
    lenth_val |= i2c_rx_buf[1];
    delay(100);
    return lenth_val;
}
